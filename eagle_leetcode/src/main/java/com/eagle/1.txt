// https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/
//1769
    public int[] minOperations(String boxes)
        int n = boxes.length(), res = 0, carry = 0, num = 0;
//        char[] chars = boxes.toCharArray();
        int[] cnt = new int[n];
        for(int i = 1; i < n; i++) {
            char c = boxes.charAt(i);
            carry += num;
            if(c == '1') {
                num++;
                carry++;
            }
            cnt[i] = carry;
        }
        num = 0;
        carry = 0;
        for(int i = n - 2; i >= 0; i--) {
            char c = boxes.charAt(i);
            carry += num;
            if(c == '1') {
                num++;
                carry++;
            }
            cnt[i] += carry;
        }
        return cnt;

    }

            PriorityQueue<Integer> q = new PriorityQueue<>((a, b) -> b - a);
            int n = nums.length, max = Integer.MIN_VALUE;
            int i = 0;
            for (; i < k; i++) {
                q.add(nums[i]);
            }
            int[] res = new int[n - 2];
            int index = 0;
            res[index++] = q.peek();
            for (; i < n; i++) {
                q.remove(nums[i - 3]);
                q.add(nums[i]);
                res[index++] = q.peek();
            }
            return nums;
    public int[] maxSlidingWindow(int[] nums, int k) {
        LinkedList<Integer> q = new LinkedList<>();
        int i = 0, n = nums.length, index = 0;
        for(; i < k; i++) {
            while (!q.isEmpty() && nums[q.peekLast()] <= nums[i]) {
                q.pollLast();
            }
            q.addLast(i);
        }
        int[] res = new int[n - k + 1];
        res[index++] = nums[q.peekFirst()];
        for(; i < n; i++){
            if(!q.isEmpty() && q.peekFirst() <= i - k) {
                q.pollFirst();
            }
            while (!q.isEmpty() && nums[q.peekLast()] <= nums[i]) {
                q.pollLast();
            }
            q.addLast(i);
            res[index++] = nums[q.peekFirst()];
        }
        return res;
    }
        int[] ints = s.maxSlidingWindow(arr, 3);
        System.out.println(Arrays.toString(ints));