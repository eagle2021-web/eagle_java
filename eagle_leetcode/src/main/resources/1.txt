// https://leetcode.cn/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/
//1769
    public int[] minOperations(String boxes)
        int n = boxes.length(), res = 0, carry = 0, num = 0;
//        char[] chars = boxes.toCharArray();
        int[] cnt = new int[n];
        for(int i = 1; i < n; i++) {
            char c = boxes.charAt(i);
            carry += num;
            if(c == '1') {
                num++;
                carry++;
            }
            cnt[i] = carry;
        }
        num = 0;
        carry = 0;
        for(int i = n - 2; i >= 0; i--) {
            char c = boxes.charAt(i);
            carry += num;
            if(c == '1') {
                num++;
                carry++;
            }
            cnt[i] += carry;
        }
        return cnt;

    }

            PriorityQueue<Integer> q = new PriorityQueue<>((a, b) -> b - a);
            int n = nums.length, max = Integer.MIN_VALUE;
            int i = 0;
            for (; i < k; i++) {
                q.add(nums[i]);
            }
            int[] res = new int[n - 2];
            int index = 0;
            res[index++] = q.peek();
            for (; i < n; i++) {
                q.remove(nums[i - 3]);
                q.add(nums[i]);
                res[index++] = q.peek();
            }
            return nums;
    public int[] maxSlidingWindow(int[] nums, int k) {
        LinkedList<Integer> q = new LinkedList<>();
        int i = 0, n = nums.length, index = 0;
        for(; i < k; i++) {
            while (!q.isEmpty() && nums[q.peekLast()] <= nums[i]) {
                q.pollLast();
            }
            q.addLast(i);
        }
        int[] res = new int[n - k + 1];
        res[index++] = nums[q.peekFirst()];
        for(; i < n; i++){
            if(!q.isEmpty() && q.peekFirst() <= i - k) {
                q.pollFirst();
            }
            while (!q.isEmpty() && nums[q.peekLast()] <= nums[i]) {
                q.pollLast();
            }
            q.addLast(i);
            res[index++] = nums[q.peekFirst()];
        }
        return res;
    }
        int[] ints = s.maxSlidingWindow(arr, 3);
        System.out.println(Arrays.toString(ints));

    final int INF = 1111;
    final TreeNode INF_NODE = new TreeNode(INF);

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "";
        }
        LinkedList<TreeNode> q = new LinkedList<>();
        q.add(root);
        StringBuffer sb = new StringBuffer();
        while (!q.isEmpty()) {
            TreeNode poll = q.pollFirst();
            sb.append(poll.val).append("_");
            if (poll.val != INF) {
                q.addLast(poll.left == null ? INF_NODE : poll.left);
                q.addLast(poll.right == null ? INF_NODE : poll.right);
            }
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.equals("")) return null;
        LinkedList<TreeNode> q = new LinkedList<>();
        String[] arr = data.split("_");
        TreeNode root = new TreeNode(Integer.parseInt(arr[0]));
        q.addLast(root);
        for (int i = 1; i < arr.length; i += 2) {
            TreeNode treeNode = q.pollFirst();
            int a = Integer.parseInt(arr[i]), b = Integer.parseInt(arr[i + 1]);
            ;
            if (a != INF) {
                treeNode.left = new TreeNode(a);
                q.addLast(treeNode.left);
            }
            if (b != INF) {
                treeNode.right = new TreeNode(b);
                q.addLast(treeNode.right);
            }
        }
        return root;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        int n = 0;
        if (lists.length == 0) return null;
        PriorityQueue<ListNode> q = new PriorityQueue<>((o1, o2) -> o1.val - o2.val);
        for (ListNode node : lists) {
            if (node != null) {
                q.add(node);
            }
        }
        ListNode mockHead = new ListNode(1);
        ListNode pre = mockHead;
        while (!q.isEmpty()) {
            ListNode poll = q.poll();
            int val = poll.val;
            pre.next = new ListNode(val);
            pre = pre.next;
            if (poll.next != null) q.add(poll.next);
        }
        return mockHead.next;
    }
   public static void main(String[] args) {
        Codec s = new Codec();
        s.minCut("leet");
    }
    public int minCut(String s) {
        char[] chars = s.toCharArray();
        int n = chars.length;
        boolean[][] dp = new boolean[n + 1][n + 1];
        for (int r2 = 1; r2 <= n; r2++) {
            for (int l2 = r2; l2 >= 1; l2--) {
                if (l2 == r2) {
                    dp[l2][r2] = true;
                } else if (chars[l2 - 1] == chars[r2 - 1]) {
                    if (l2 + 1 == r2 || dp[l2 + 1][r2 - 1]) {
                        dp[l2][r2] = true;
                    }
                }
            }
        }
        for(boolean[] d: dp) {
            System.out.println(Arrays.toString(d));
        }
        int[] dp2 = new int[n + 1];
        Arrays.fill(dp2, n - 1);
        dp2[0] = 0;
        for (int i = 1; i <= n; i++) {
            if (dp[1][i]) {
                dp2[i] = 0;
                continue;
            }
            for (int j = 1; j < i; j++) {
                if(dp[j + 1][i]) {
                    dp2[i] = Math.min(dp2[j] + 1, dp2[i]);
                }
            }
        }

        System.out.println(Arrays.toString(dp2));
        return dp2[n];
    }

    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        char[] cs = s.toCharArray();
        char[] ct = t.toCharArray();
        int[][] dp = new int[m + 1][n + 1];

        for(int i = 0; i <= m; i++)dp[i][0] = 1;

        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++){
                dp[i][j] = dp[i - 1][j];
                if (cs[i - 1] == ct[j - 1]) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        return dp[m][n];
    }
class Solution {
    public static void main(String[] args) {
        int[] arr = {1, 3, 1, 3, 5, 3, 6, 7};
        Solution s = new Solution();
        System.out.println(s.minWindow("ADOBECODEBANC", "ABC"));
    }

    public int secondHighest(String s) {
        int max = -1, second_max = -1;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                int digit = c - '0';
                if (digit > max) {
                    second_max = max;
                    max = digit;
                }
            }
        }
        return second_max;
    }

    public String minWindow(String s, String t) {
        final int LEN = 50001;
        int m = s.length(), n = t.length();
        int[] arr = new int[128];
        int index = -1;
        for (int i = 0; i < n; i++) {
            arr[t.charAt(i)]++;
        }
        for (int i = 0; i < 128; i++) {
            if (arr[i] == 0) arr[i] = LEN;
        }
        int min = Integer.MAX_VALUE, l = 0, cnt = 0;
        String res = "";
        char[] chars = s.toCharArray();
        for (int i = 0; i < m; i++) {
            char c = chars[i];
            if (arr[c] == LEN) continue;
            arr[c]--;
            if (arr[c] >= 0) cnt++;
            while (arr[index = s.charAt(l)] < 0 || arr[index] == LEN) {
                if (arr[index] < 0) {
                    arr[index]++;
                }
                l++;
            }
            if (cnt == n && i - l + 1 < min) {
                min = i - l + 1;
                res = String.copyValueOf(chars, l, min);
            }
        }
        return res;
    }

    public int largestRectangleArea(int[] heights) {
        int n = heights.length, res = 0;
        int[] l = new int[n], r = new int[n];
        Arrays.fill(r, n);
        Arrays.fill(l, -1);
        LinkedList<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            while (!q.isEmpty() && heights[q.peekLast()] > heights[i]) r[q.pollLast()] = i;
            q.add(i);
        }
        q.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!q.isEmpty() && heights[q.peekLast()] > heights[i]) l[q.pollLast()] = i;
            q.add(i);
        }
        for (int i = 0; i < n; i++) {
            res = Math.max(heights[i] * (r[i] - l[i] - 1), res);
        }
        return res;
    }

    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        int[][] sums = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int tmp = matrix[i][j] == '0' ? 0 : 1;
                if (i == 0) {
                    sums[i][j] = tmp;
                } else {
                    sums[i][j] = tmp == 1 ? sums[i - 1][j] + 1 : 0;
                }
            }
        }
        int res = 0;
        int[] left = new int[n], right = new int[n];
        for (int i = 0; i < m; i++) {
            int[] cur = sums[i];
            LinkedList<Integer> q = new LinkedList<>();

            Arrays.fill(left, -1);
            Arrays.fill(right, n);
            for (int j = 0; j < n; j++) {
                while (!q.isEmpty() && cur[q.peekLast()] > cur[j]) right[q.pollLast()] = j;
                q.addLast(j);
            }

            for (int j = n - 1; j >= 0; j--) {
                while (!q.isEmpty() && cur[q.peekLast()] > cur[j]) left[q.pollLast()] = j;
                q.add(j);
            }

            for (int j = 0; j < n; j++) {
                res = Math.max(res, cur[j] * (right[j] - left[j] - 1));
            }
        }
        return res;
    }
}

class Codec {
    public static void main(String[] args) {
        Codec c = new Codec();
        c.ladderLength("hit", "cog",
                new ArrayList<>(Arrays.asList("hot", "dot", "dog", "lot", "log", "cog")));
    }

    public int ladderLength(String beginWord, String endWord, List<String> wordList) {

        int size = wordList.size(), level = 0;
        HashSet<String> set = new HashSet<>(wordList);
        if(!set.contains(endWord)){
            return 0;
        }
        LinkedList<String> q = new LinkedList<>();
        q.add(beginWord);
        HashMap<String, Integer> h1 = new HashMap<>();
        h1.put(beginWord, 1);

        LinkedList<String> q2 = new LinkedList<>();
        q2.add(endWord);
        HashMap<String, Integer> h2 = new HashMap<>();
        h2.put(endWord, 1);
        while (!q.isEmpty() && !q2.isEmpty()) {
            int s1 = q.size(), s2 = q2.size();
            HashMap<String, Integer> my_map = h1, another_map = h2;
            LinkedList<String> my_q = q;

            if(s1 > s2){
                my_map = h2;
                another_map = h1;
                my_q = q2;
            }

            LinkedList<String> new_q = new LinkedList<>();
            while (!my_q.isEmpty()) {
                String s = my_q.pollFirst();
                Integer my_level = my_map.get(s);

                for (Map.Entry<String, Integer> e : another_map.entrySet()) {
                    if(match(e.getKey(), s)){
                        return e.getValue() + my_level;
                    }
                }
                HashSet<String> tmp = new HashSet<>();
                for (String s3 : set) {
                    if(match(s3, s)){
                        my_map.put(s3, my_level + 1);
                        new_q.addLast(s3);
                        tmp.add(s3);
                    }
                }
                for (String s3 : tmp) {
                    set.remove(s3);
                }
            }

            if(s1 <= s2){
                q = new_q;
            } else {
                q2 = new_q;
            }

        }
        return 0;
    }

    public boolean match(String s, String t) {
        int m = s.length(), n = t.length();
        if (m != n) return false;
        if (s.equals(t)) {
            return true;
        }
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            if (s.charAt(i) == t.charAt(i)) continue;
            cnt++;
            if (cnt > 1) return false;
        }
        return true;
    }
}
    public int maxPathSum(TreeNode root) {
        dfs(root);
        return res;
    }

    public int dfs(TreeNode node) {
        if (node==null)return 0;
        int l = dfs(node.left), r = dfs(node.right);
        l = Math.max(l, 0);
        r = Math.max(r, 0);
        int max = node.val + l + r;
        res = Math.max(max, res);
        return node.val + Math.max(l, r);
    }
   void dfs(int[] toppingCosts, int p,  int curCosts){
        if(Math.abs(res - target) >= Math.abs(curCosts - target)){
            if(Math.abs(res - target) >Math.abs(curCosts - target)) {
                res = curCosts;
            }else {
                res = Math.min(curCosts, res);
            }
        }
        if(curCosts == target){
            res = target;
            return;
        }

        if(p == toppingCosts.length)return;
        int cur_cost = toppingCosts[p];
        dfs(toppingCosts, p + 1, cur_cost + curCosts);
        dfs(toppingCosts, p + 1, cur_cost * 2+ curCosts);
        dfs(toppingCosts, p + 1,  curCosts);
    }

    int biggerMin = Integer.MAX_VALUE;
    public int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
        int min = Arrays.stream(baseCosts).min().getAsInt();
        if(min >= target){
            return min;
        }
        int res = target * 2 - min;
        int n = toppingCosts.length;
        boolean[] dp = new boolean[target + 1];
        for (int baseCost : baseCosts) {
            if(baseCost <= target){
                dp[baseCost]  = true;
            } else {
                res = Math.min(res, baseCost);
            }
        }
        for (int cur_cost : toppingCosts) {
            for(int j = target; j >= 1; j--){
                boolean tmp = dp[j];
                for(int k = 1; k <= 2; k++){
                    int cost = cur_cost * k;
                    if(tmp && j + cost >= target){
                        res = Math.min(res, j + cost);
                    }
                    if(j - cost > 0){
                        dp[j] |= dp[j - cost];
                    }
                }
            }
        }

        for(int i = 0; i <= res - target; i++){
            if(dp[target - i])return target - i;
        }
        return res;
    }
    int res = Integer.MIN_VALUE / 10;
    int target = 0;
    int m;
    int n;
    static final int[][] dirs = new int[][]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
    int[][] arr;
    public int longestIncreasingPath(int[][] matrix) {
        this.m = matrix.length;
        this.n = matrix[0].length;
        int res = 1;
        this.arr = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                res = Math.max(res, dfs(matrix, i, j));
            }
        }
        return res;
    }

    int dfs(int[][] matrix, int x, int y){
        if(arr[x][y] != 0)return arr[x][y];
        arr[x][y] = 1;
        for (int[] dir : dirs) {
            int new_x = x + dir[0], new_y = y + dir[1];
            if(new_x >= 0 && new_x< m && new_y >=0 && new_y < n && matrix[new_x][new_y] > matrix[x][y]){
                arr[x][y] = Math.max(arr[x][y], dfs(matrix, new_x, new_y) + 1);
            }
        }
        return arr[x][y];
    }